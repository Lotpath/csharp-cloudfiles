= Mosso Cloud Files

== Description

This is a .NET/C# interface into the {Rackspace}[http://rackspace.com/] {Mosso Cloud Files}[http://www.mosso.com/cloudfiles.jsp] service. Cloud Files is reliable, scalable and affordable web-based storage hosting for backing up and archiving all your static content.  Cloud Files is the first and only cloud service that leverages a tier one CDN provider to create such an easy and complete storage-to-delivery solution for media content.

== Getting dll and using in your project

Go to the {downloads page}[http://github.com/rackspace/csharp-cloudfiles/downloads] and download the latest version.  Unzip the file, unzip the bin zip, and grab the following files:

	com.mosso.cloudfiles.dll
	log4net.dll
	log4Net.config

Reference them from your application.  Look at the examples below once you done this.  Example folder structure:

	/Your_project
		/lib
			/cloudfiles
				com.mosso.cloudfiles.dll
				log4net.dll
		/src
			...

== Getting source, compiling, and using in your project

After you've either installed {msysgit}[http://code.google.com/p/msysgit/downloads/list] or {cygwin}[http://www.cygwin.com/setup.exe] and chosen the git-core package, you can clone this github repository:

	git clone git://github.com/rackspace/csharp-cloudfiles.git

This will create the csharp-cloudfiles directory locally on your computer.  Go into that folder and run:

	build.bat

This will compile the project and give you a resulting dll in ...csharp-cloudfiles/bin/debug/

Look above for an example folder structure.

== Logging

Logging is done with the log4net.dll and log4net.config file that are included in the source/downloads.
You just need to edit the log4net.config file to turn it on:

	change:
	<log4net debug="false">
	
	to:
	<log4net debug="true">
	
so that logging starts and you get the desired logging output and format.

Currently the log is going to log/com.mosso.cloudfiles.log, where you have the dll referenced.

 
	<file value="logs/com.mosso.cloudfiles.log" />   (in the log4net.config file)

Please reference the {log4net documentation}[http://logging.apache.org/log4net/release/config-examples.html] on how to edit that config file.

== Integration Testing

The com.mosso.cloudfiles.integration.tests project is a full regression testing suite.  In order to use this you need to edit the Credentials.cs file:

	public const string USERNAME = "ENTER YOUR USERNAME HERE";
	public const string API_KEY = "ENTER YOUR API KEY HERE";

to include your username and api key.

== Unit Testing

This project is still currently in progress and has some working unit tests.

== Forums

Please visit the {Mosso Forums}[https://manage.mosso.com/forum] if you have any questions.  Once you are logged in, scroll to cloud files category/grouping and then the .NET thread.

== Examples

See the class definitions for documentation on specific methods and operations.

types are explicitly used in this example. The +var+ keyword could also be used and object/collection initializers could be used.  We are being explicit for example

<b>Connect to CloudFiles</b>
	UserCredentials userCredentials = new UserCredentials("username", "api key");
	IConnection connection = new Connection(userCredentials);

<b>Get the account information</b>
	AccountInformation accountInformation = connection.GetAccountInformation();

<b>Get the account information as JSON</b>
	string jsonReturnValue = connection.GetAccountInformationJson();

<b>Get the account information as XML</b>
	XmlDocument xmlReturnValue = connection.GetAccountInformationXml();

<b>Create new container</b>
	connection.CreateContainer("container name");

<b>Get container information</b>
	Container container = connection.GetContainerInformation("container name");

<b>Get container information as JSON</b>
	string jsonResponse = connection.GetContainerInformationJson("container name");

<b>Get container information as XML</b>
	XmlDocument xmlResponse = connection.GetContainerInformationXml("container name");

<b>Put item in container with metadata</b>
	Dictionary<string, string> metadata = new Dictionary<string, string>();
	metadata.Add("key1", "value1");
	metadata.Add("key2", "value2");
	metadata.Add("key3", "value3");
	connection.PutStorageItem("container name", "C:\Local\File\Path\file.txt", metadata);

<b>Get all the containers for the account</b>
	List<string> containers = connection.GetContainers();

<b>Put item in container without metadata</b>
	connection.PutStorageItem("container name", "C:\Local\File\Path\file.txt");

<b>Put item in container from stream with metadata</b>
	Dictionary{string, string} metadata = new Dictionary{string, string}();
	metadata.Add("key1", "value1");
	metadata.Add("key2", "value2");
	metadata.Add("key3", "value3");
	FileInfo file = new FileInfo("C:\Local\File\Path\file.txt");
	connection.PutStorageItem("container name", file.Open(FileMode.Open), "RemoteFileName.txt");

<b>Put item in container from stream</b>
	FileInfo file = new FileInfo("C:\Local\File\Path\file.txt");
	connection.PutStorageItem("container name", file.Open(FileMode.Open), "RemoteFileName.txt", metadata);

<b>Make path explicitly with auto-creation of "directory" structure</b>
	connection.MakePath("/dir1/dir2/dir3/dir4/file.txt");

<b>List all the items in a container</b>
	List<string> containerItemList = connection.GetContainerItemList("container name");

<b>Shortening the search results by using parameter dictionary</b>
	Dictionary<GetItemListParameters, string> parameters = new Dictionary<GetItemListParameters, string>();
	parameters.Add(GetItemListParameters.Limit, 2);
	parameters.Add(GetItemListParameters.Marker, 1);
	parameters.Add(GetItemListParameters.Prefix, "a");
	List<string> containerItemList = connection.GetContainerItemList("container name", parameters);

<b>Get item from container</b>
	StorageItem storageItem = connection.GetStorageItem("container name", "RemoteStorageItem.txt");

<b>Get item from container with request Header fields</b>
	Dictionary<RequestHeaderFields, string> requestHeaderFields = Dictionary<RequestHeaderFields, string>();
	string dummy_etag = "5c66108b7543c6f16145e25df9849f7f";
	requestHeaderFields.Add(RequestHeaderFields.IfMatch, dummy_etag);
	requestHeaderFields.Add(RequestHeaderFields.IfNoneMatch, dummy_etag);
	requestHeaderFields.Add(RequestHeaderFields.IfModifiedSince, DateTime.Now.AddDays(6).ToString());
	requestHeaderFields.Add(RequestHeaderFields.IfUnmodifiedSince, DateTime.Now.AddDays(-6).ToString());
	requestHeaderFields.Add(RequestHeaderFields.Range, "0-5");
	StorageItem storageItem = connection.GetStorageItem("container name", "RemoteStorageItem.txt", requestHeaderFields);

<b>Get item from container and put straight into local file</b>
	StorageItem storageItem = connection.GetStorageItem("container name", "RemoteStorageItem.txt", "C:\Local\File\Path\file.txt");

<b>Get item from container and put straight into local file with request Header fields</b>
	Dictionary<RequestHeaderFields, string> requestHeaderFields = Dictionary<RequestHeaderFields, string>();
	string dummy_etag = "5c66108b7543c6f16145e25df9849f7f";
	requestHeaderFields.Add(RequestHeaderFields.IfMatch, dummy_etag);
	requestHeaderFields.Add(RequestHeaderFields.IfNoneMatch, dummy_etag);
	requestHeaderFields.Add(RequestHeaderFields.IfModifiedSince, DateTime.Now.AddDays(6).ToString());
	requestHeaderFields.Add(RequestHeaderFields.IfUnmodifiedSince, DateTime.Now.AddDays(-6).ToString());
	requestHeaderFields.Add(RequestHeaderFields.Range, "0-5");
	StorageItem storageItem = connection.GetStorageItem("container name", "RemoteFileName.txt", "C:\Local\File\Path\file.txt", requestHeaderFields);

<b>Set meta data information for an item in a container</b>
	Dictionary<string, string> metadata = new Dictionary<string, string>();
	metadata.Add("key1", "value1");
	metadata.Add("key2", "value2");
	metadata.Add("key3", "value3");
	connection.SetStorageItemMetaInformation("container name", "C:\Local\File\Path\file.txt", metadata);

<b>Get item information</b>
	StorageItem storageItem = connection.GetStorageItemInformation("container name", "RemoteStorageItem.txt");

<b>Get a list of the public containers (on the CDN)</b>
	List<string> containers = connection.GetPublicContainers();

<b>Mark a container as public (available on the CDN)</b>
	Uri containerPublicUrl = connection.MarkContainerAsPublic("container name");
	
<b>Mark a container as public (available on the CDN), with time-to-live (TTL) parameters</b>
	Uri containerPublicUrl = connection.MarkContainerAsPublic("container name", 12345);

<b>Get public container information</b>
	Container container = connection.GetPublicContainerInformation("container name")

<b>Set TTL on public container</b>
	connection.SetTTLOnPublicContainer("container name", 12345);
	
<b>Mark a container as private (remove it from the CDN)</b>
	connection.MarkContainerAsPrivate("container name");
	
<b>Delete item from container</b>
	connection.DeleteStorageItem("container name", "RemoteStorageItem.txt");

<b>Delete container</b>
	connection.DeleteContainer("container name");

== Authors

Jason Meridth <jason.meridth@rackspace.com>

Matt Dietz <matt.dietz@rackspace.com>

== License

See COPYING for license information.
Copyright (c) 2009, Rackspace US, Inc.